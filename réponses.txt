Bonjour, vous trouverez ici toutes les réponses pour le TP1 de Git.
ATTENTION !
Veuillez noter que je n'ai pas vu une des premières instructions "git switch -c develop", donc tout à été fait sur la branche master, veuillez m'en excuser.

1) La commande status sert à afficher l'état général de la branche actuelle , elle sert à savoir quels fichiers ont été commit ,lesquels doivent être ajoutés à la staging area, les différences entre ta branche actuelle et la branche master. Dans notre cas , il y est affiché qu'il n'y a pas encore de commit "no commits yet" et qu'il faudrait ajouter les fichiers readme et réponses.txt à la staging area avec un add

2) On remarque que les fichiers README et réponses sont passés de rouge(fichiers présents dans le dossier actuel) à vert, ils ont été ajoutés à la staging area , désormais git nous les indique comme "changes to be commited" , on doit donc utiliser un commit pour les rajouter au local repository, l'endroit qui stocke les commits.

3) Dans la zone d'index (staging area)

4) -

5) J'ai utilisé la commande git log qui affiche tous les commits effectués.

6)Comme le nom l'indique git diff --staged agit comme git diff , mais ça montre les différences entre le staging area et le dernier commit. Tandis que , git diff montre les différences entre le dossier actuel et le staging area.

7)
-git show prends en paramètre un hash , elle montre la modification qui a été effectué avec ce commit, ici git show B10a (le hash du deuxième commit pour moi) montre que le fichier affecté est README.md et en vert est affiché "Ajout d'une deuxième ligne", la ligne de texte précédemment ajouté.

-git status quand à lui montre l'état général de la branche actuelle, elle n'affiche donc rien si il n'y a rien à add et si il n'y aucun commit, si il y a alors la commande va nous aider et nous dire ce qu'on doit commit et ce qu'on doit add.

-git diff est un outil de comparaison entre deux éléments. Les éléments peuvent être des commits ou des branches. On peut faire des git diff commit/commit , commit/branche et vice versa.

-git log affiche tous les commits réalisés dans la branche actuelle, elle affiche aussi leur hash qui permet d'utiliser git show, par exemple.

8) 

#Pré-reset du fichier brouillon.txt 

daich@Kyur4Th3Itch MINGW64 ~/Desktop/Ecole/Git/TP1 (master)
$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   brouillon.txt
        new file:   fichier1.txt


daich@Kyur4Th3Itch MINGW64 ~/Desktop/Ecole/Git/TP1 (master)

-----------------------------------------------------------

#Post-reset du fichier brouillon.txt

daich@Kyur4Th3Itch MINGW64 ~/Desktop/Ecole/Git/TP1 (master)
$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   fichier1.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        brouillon.txt


daich@Kyur4Th3Itch MINGW64 ~/Desktop/Ecole/Git/TP1 (master)

9) git reset implique 2 zones de git, le working directory (le dossier actuel ,physique (hors git)) ainsi que le staging area, une fois qu'on fait add sur un fichier il sera rajouté à la staging area depuis le working directory, une fois la commande git reset faite sur le fichier, il sera enleve de la staging area et il sera de nouveau pas présent sur git mais seulement dans le working directory.


10) On peut faire la commande git status, après le commit du fichier1.txt elle devrait nous dire que brouillon.txt est "untracked" c-à-d qu'il est présent seulement sur le working directory,il serait donc en rouge.
Après test voici le résultat obtenu, qui semble correspondre à mes attentes.
-----------------------------------------------------------
#Post-commit

daich@Kyur4Th3Itch MINGW64 ~/Desktop/Ecole/Git/TP1 (master)
$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        brouillon.txt

nothing added to commit but untracked files present (use "git add" to track)

daich@Kyur4Th3Itch MINGW64 ~/Desktop/Ecole/Git/TP1 (master)

-----------------------------------------------------------
daich@Kyur4Th3Itch MINGW64 ~/Desktop/Ecole/Git/TP1 (master)
$ git log
commit 25ede0360e7586ad1e1bd06924c5f4d79257ea2b (HEAD -> master)
Author: Denis ZAPOI <daichiden2005@gmail.com>
Date:   Thu Apr 3 18:52:10 2025 +0200

    Ajout du fichier1.txt qui est le fichier à garder


11) J'ai utilisé git log pour avoir tous les commits faits, j'ai vérifié le plus récent avec git show "fdda" et ensuite j'ai fait un git status pour voir si tout était à jour.

12) On peut faire git log origin/master (dans mon cas car j'ai pas fait la branche develop)

13) git clone https://github.com/PaulineLam24/TP-Git

14) 
-On trouve seulement un fichier README.md
-On trouve 3 commits:
	-Correctif README.md
	-Ajout dans README.md
	-Initial commit
-On fait d'abord un cd pour se placer dans ce nouveau repo cloné, ensuite git log suffit à afficher tous les commits ainsi que leur titre.

15) On peut utiliser git log pour récupérer les hash puis faire :
	git diff 9b68 f7a7
	git diff f7a7 f813

On peut utiliser git log -p aussi.

Le premier commit ne "fait" rien
Le second ajoute deux lignes de texte dans le readme:
	+# TP-Git
	+# Ceci est un fichier README.md...

Le troisième enlève le "#" de la deuxième ligne du Readme afin que cette ligne s'affiche en texte et non pas en titre:
	-# Ceci est un fichier README.md...
	+	
	+Ceci est un fichier README.md...



	
